
import streamlit as st
import pandas as pd
import numpy as np

st.set_page_config(layout="wide")
st.title("üßÆ Smart Reorder Tool")

# === LAYOUT: LEFT / RIGHT ===
left_col, right_col = st.columns([1, 1])

with left_col:
    uploaded_file = st.file_uploader("üì§ Upload \"Sales by item\" file (.CSV)", type=["csv"])
    uploaded_stock = st.file_uploader("üì§ Upload \"Inventory\" File (.CSV)", type=["csv"])
    stock_days = st.number_input("üì¶ Stock Coverage (Day)", value=45, min_value=1)
    reorder_days = st.number_input("üîÅ ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Å‡∏µ‡πà‡∏ß‡∏±‡∏ô", value=7, min_value=1)

with right_col:
    st.markdown("### ‚ÑπÔ∏è RU Score (Reorder Urgency)")
    st.markdown("""
**RU Score (Reorder Urgency)** ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å  
- ‡∏ñ‡πâ‡∏≤ **‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å** ‚Üí ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏∞ **‡πÄ‡∏™‡∏µ‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£** ‡∏°‡∏≤‡∏Å  
- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å: ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô √∑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ stock ‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ (Stock Coverage)
    """)
    category_selection_placeholder = st.empty()

# Centered Run Button
st.markdown("### ")
run_center = st.columns([2, 1, 2])[1]  # center column in 3-part layout
with run_center:
    run_analysis = st.button("‚ñ∂Ô∏è Run Analysis")

if run_analysis and uploaded_file and uploaded_stock:
    sales_df = pd.read_csv(uploaded_file)
    stock_df = pd.read_csv(uploaded_stock)

    stock_df = stock_df.rename(columns={"In stock [I-animal]": "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "Cost": "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"})
    stock_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = stock_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].fillna(0)

    sales_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢"] = sales_df["Items sold"] - sales_df["Items refunded"]
    sales_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"] = sales_df["Cost of goods"] / sales_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢"]
    sales_df["‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°"] = sales_df["Net sales"]

    grouped_sales = sales_df.groupby("SKU").agg(
        total_sales=("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢", "sum"),
        total_revenue=("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", "sum"),
        avg_cost_per_unit=("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô", "mean")
    ).reset_index()

    merged_df = pd.merge(stock_df, grouped_sales, on="SKU", how="left")
    merged_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"] = merged_df["avg_cost_per_unit"].fillna(merged_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"])
    merged_df["total_sales"] = merged_df["total_sales"].fillna(0)
    merged_df["total_revenue"] = merged_df["total_revenue"].fillna(0)

    merged_df["total_profit"] = merged_df["total_revenue"] - (merged_df["total_sales"] * merged_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"])
    merged_df["avg_profit_per_day"] = merged_df["total_profit"] / stock_days
    merged_df["avg_sales_per_day"] = merged_df["total_sales"] / stock_days

    merged_df["Stock Coverage (Day)"] = merged_df.apply(
        lambda row: row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] / row["avg_sales_per_day"] if row["avg_sales_per_day"] > 0 else None,
        axis=1
    )

    def compute_status_and_score(row):
        if row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] < 0:
            return "Stock ‡∏ï‡∏¥‡∏î‡∏•‡∏ö", row["avg_profit_per_day"]
        elif row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] == 0 and row["total_sales"] > 0:
            return "‡∏´‡∏°‡∏î!!!", row["avg_profit_per_day"]
        elif row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] == 0 and row["total_sales"] == 0:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ Stock = 0", 0
        elif row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] > 0 and row["total_sales"] == 0:
            return "‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ T_T", 0
        else:
            score = row["avg_profit_per_day"] / row["Stock Coverage (Day)"] if row["Stock Coverage (Day)"] else 0
            return f"{row['Stock Coverage (Day)']:.1f} ‡∏ß‡∏±‡∏ô", score

    merged_df[["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "RU Score"]] = merged_df.apply(compute_status_and_score, axis=1, result_type="expand")
    merged_df = merged_df[merged_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] != "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ Stock = 0"]

    merged_df["‡∏Ñ‡∏ß‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏ä‡∏¥‡πâ‡∏ô)"] = (merged_df["avg_sales_per_day"] * stock_days - merged_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"]).apply(lambda x: max(0, int(np.ceil(x))))
    merged_df["RU Score"] = merged_df["RU Score"].astype(float).round(1)
    merged_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢"] = (reorder_days - merged_df["Stock Coverage (Day)"]).apply(lambda x: max(0, int(np.ceil(x))))
    merged_df["Opp. Loss (Baht)"] = (merged_df["avg_profit_per_day"] * merged_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢"]).round(2)

    if "Category" in merged_df.columns:
        available_categories = merged_df["Category"].dropna().unique().tolist()
        default_exclude = ["Bird", "Online selling", "‡πÅ‡∏•‡∏Å‡πÅ‡∏ï‡πâ‡∏°", "‡∏≠‡∏≤‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏°‡∏ß"]
        default_include = [cat for cat in available_categories if cat not in default_exclude]
        selected_categories = category_selection_placeholder.multiselect("üìÇ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Category ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á", available_categories, default=default_include)
        merged_df = merged_df[merged_df["Category"].isin(selected_categories)]

    st.divider()
    st.subheader("üìÇ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Category Summary)")

    if "Category" in merged_df.columns:
        summary = merged_df.groupby("Category").agg(Total_RU_Score=("RU Score", "sum")).reset_index()
        st.dataframe(summary)

        category_list = summary.sort_values("Total_RU_Score", ascending=False)["Category"]
        for cat in category_list:
            cat_df = merged_df[merged_df["Category"] == cat].copy()
            cat_df = cat_df.sort_values(by="RU Score", ascending=False).reset_index(drop=True)
            cat_df.index += 1
            display_df = cat_df[["Name", "‡∏Ñ‡∏ß‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° (‡∏ä‡∏¥‡πâ‡∏ô)", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "RU Score", "Opp. Loss (Baht)"]].copy()
            display_df.insert(0, "No.", display_df.index)
            st.markdown(f"#### üóÇÔ∏è {cat} (RU Score = {cat_df['RU Score'].sum():,.2f})")
            st.dataframe(display_df)
