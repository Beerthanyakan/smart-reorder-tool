
import streamlit as st
import pandas as pd

st.title("üßÆ Smart Reorder Tool")

st.markdown("### ‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Loss Risk Score")
st.markdown("""
**Loss Risk Score** ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£‡∏´‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å  
- ‡∏ñ‡πâ‡∏≤ **‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å** ‚Üí ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏∞ **‡πÄ‡∏™‡∏µ‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏Å‡∏≥‡πÑ‡∏£** ‡∏°‡∏≤‡∏Å  
- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å:  
**Loss Risk Score = ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô √∑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏û‡∏≠‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ (Days Coverage)**
""")

uploaded_file = st.file_uploader("üì§ Upload Sales CSV file", type=["csv"])
uploaded_stock = st.file_uploader("üì§ Upload Inventory CSV (.csv)", type=["csv"])

days = st.number_input("üìÖ ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡∏ß‡∏±‡∏ô)", value=45, min_value=1)

if uploaded_file and uploaded_stock:
    sales_data = pd.read_csv(uploaded_file)
    stock_df = pd.read_csv(uploaded_stock)

    stock_df = stock_df.rename(columns={"In stock [I-animal]": "‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "Cost": "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"})
    stock_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] = stock_df["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"].fillna(0)

    sales_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢"] = sales_data["Items sold"] - sales_data["Items refunded"]
    sales_data["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"] = sales_data["Cost of goods"] / sales_data["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢"]
    sales_data["‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°"] = sales_data["Net sales"]

    grouped_sales = sales_data.groupby("SKU").agg(
        total_sales=("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢", "sum"),
        total_revenue=("‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°", "sum"),
        avg_cost_per_unit=("‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô", "mean")
    ).reset_index()

    merged_df = pd.merge(stock_df, grouped_sales, on="SKU", how="left")
    merged_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"] = merged_df["avg_cost_per_unit"].fillna(merged_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"])
    merged_df["total_sales"] = merged_df["total_sales"].fillna(0)
    merged_df["total_revenue"] = merged_df["total_revenue"].fillna(0)

    merged_df["total_profit"] = merged_df["total_revenue"] - (merged_df["total_sales"] * merged_df["‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏ä‡∏¥‡πâ‡∏ô"])
    merged_df["avg_profit_per_day"] = merged_df["total_profit"] / days
    merged_df["avg_sales_per_day"] = merged_df["total_sales"] / days

    merged_df["days_coverage"] = merged_df.apply(
        lambda row: row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] / row["avg_sales_per_day"] if row["avg_sales_per_day"] > 0 else None,
        axis=1
    )

    def compute_status_and_score(row):
        if row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] < 0:
            return "Stock ‡∏ï‡∏¥‡∏î‡∏•‡∏ö", row["avg_profit_per_day"]
        elif row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] == 0 and row["total_sales"] > 0:
            return "‡∏´‡∏°‡∏î!!!", row["avg_profit_per_day"]
        elif row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] == 0 and row["total_sales"] == 0:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ Stock = 0", 0
        elif row["‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"] > 0 and row["total_sales"] == 0:
            return "‡∏Ç‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏¢ T_T", 0
        else:
            score = row["avg_profit_per_day"] / row["days_coverage"] if row["days_coverage"] else 0
            return f"{row['days_coverage']:.1f} ‡∏ß‡∏±‡∏ô", score

    merged_df[["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "Loss_Risk_Score"]] = merged_df.apply(compute_status_and_score, axis=1, result_type="expand")

    # Filter out unwanted categories
    categories_to_exclude = ["promotion"]
    if "Category" in merged_df.columns:
        merged_df = merged_df[~merged_df["Category"].isin(categories_to_exclude)]

    merged_df = merged_df.sort_values(by="Loss_Risk_Score", ascending=False)

    st.subheader("üìÇ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏£‡∏ß‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Category Summary)")
    if "Category" in merged_df.columns:
        summary = merged_df.groupby("Category").agg(Total_Loss_Risk_Score=("Loss_Risk_Score", "sum")).reset_index()
        st.dataframe(summary)

        for cat in summary["Category"]:
            cat_df = merged_df[merged_df["Category"] == cat]
            cat_df_display = cat_df[["Name", "SKU", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "Loss_Risk_Score"]]
            total_score = cat_df["Loss_Risk_Score"].sum()
            st.markdown(f"#### üóÇÔ∏è {cat} (‡∏£‡∏ß‡∏° Loss Risk Score: {total_score:,.2f})")
            st.dataframe(cat_df_display.reset_index(drop=True))
